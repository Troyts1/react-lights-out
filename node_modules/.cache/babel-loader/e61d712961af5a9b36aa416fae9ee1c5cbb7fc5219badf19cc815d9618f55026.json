{"ast":null,"code":"var _jsxFileName = \"/Users/troysummerall/Desktop/School/Softare-Engineer/Section-41-React_Fundamentals/41.8-Component-Design/Lightd-out-assignment/react-lights-out/src/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board({\n  nrows = 5,\n  ncols = 5,\n  chanceLightStartsOn = 0.25\n}) {\n  _s();\n  // Initialize the board state\n  const [board, setBoard] = useState(createBoard);\n\n  // Function to create the board with a specified chance of lights being on\n  function createBoard() {\n    return Array.from({\n      length: nrows\n    }).map(() => Array.from({\n      length: ncols\n    }).map(() => Math.random() < chanceLightStartsOn));\n  }\n\n  // Function to check if all cells are off (i.e., the player has won)\n  function win() {\n    return board.every(row => row.every(cell => !cell));\n  }\n\n  // Function to flip the state of cells around the clicked cell\n  function shuffleCells(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      // Create a deep copy of the old board\n      const newBoard = oldBoard.map(row => [...row]);\n\n      // Flip the cell's state at (y, x) if within bounds\n      const flipCell = (y, x, boardCopy) => {\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n      flipCell(y, x, newBoard);\n      flipCell(y, x - 1, newBoard);\n      flipCell(y, x + 1, newBoard);\n      flipCell(y - 1, x, newBoard);\n      flipCell(y + 1, x, newBoard);\n      return newBoard;\n    });\n  }\n\n  // If the player has won, display a winning message\n  if (win()) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"You Are The Winner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Create the table structure for the board\n  let table = [];\n  for (let y = 0; y < nrows; y++) {\n    let row = [];\n    for (let x = 0; x < ncols; x++) {\n      let coord = `${y}-${x}`;\n      row.push( /*#__PURE__*/_jsxDEV(Cell, {\n        coords: coord,\n        isLit: board[y][x],\n        flipCellsAroundMe: () => shuffleCells(coord)\n      }, coord, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this));\n    }\n    table.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: row\n    }, y, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 16\n    }, this));\n  }\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    className: \"Board\",\n    children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: table\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n_s(Board, \"zVoq4WVA109ToUXeeG7gqKArgbM=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","jsxDEV","_jsxDEV","Board","nrows","ncols","chanceLightStartsOn","_s","board","setBoard","createBoard","Array","from","length","map","Math","random","win","every","row","cell","shuffleCells","coord","oldBoard","y","x","split","Number","newBoard","flipCell","boardCopy","children","fileName","_jsxFileName","lineNumber","columnNumber","table","push","coords","isLit","flipCellsAroundMe","className","_c","$RefreshReg$"],"sources":["/Users/troysummerall/Desktop/School/Softare-Engineer/Section-41-React_Fundamentals/41.8-Component-Design/Lightd-out-assignment/react-lights-out/src/Board.js"],"sourcesContent":["\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\nfunction Board({ nrows = 5, ncols = 5, chanceLightStartsOn = 0.25 }) {\n  // Initialize the board state\n  const [board, setBoard] = useState(createBoard);\n\n  // Function to create the board with a specified chance of lights being on\n  function createBoard() {\n    return Array.from({ length: nrows }).map(() =>\n      Array.from({ length: ncols }).map(() =>\n        Math.random() < chanceLightStartsOn\n      )\n    );\n  }\n\n  // Function to check if all cells are off (i.e., the player has won)\n  function win() {\n    return board.every(row => row.every(cell => !cell));\n  }\n\n  // Function to flip the state of cells around the clicked cell\n  function shuffleCells(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      // Create a deep copy of the old board\n      const newBoard = oldBoard.map(row => [...row]);\n\n      // Flip the cell's state at (y, x) if within bounds\n      const flipCell = (y, x, boardCopy) => {\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      flipCell(y, x, newBoard);\n      flipCell(y, x - 1, newBoard);\n      flipCell(y, x + 1, newBoard);\n      flipCell(y - 1, x, newBoard);\n      flipCell(y + 1, x, newBoard);\n\n      return newBoard;\n    });\n  }\n\n  // If the player has won, display a winning message\n  if (win()) {\n    return <div>You Are The Winner</div>;\n  }\n\n  // Create the table structure for the board\n  let table = [];\n  for (let y = 0; y < nrows; y++) {\n    let row = [];\n    for (let x = 0; x < ncols; x++) {\n      let coord = `${y}-${x}`;\n      row.push(\n        <Cell \n          key={coord} \n          coords={coord} \n          isLit={board[y][x]} \n          flipCellsAroundMe={() => shuffleCells(coord)} \n        />\n      );\n    }\n    table.push(<tr key={y}>{row}</tr>);\n  }\n\n  return (\n    <table className=\"Board\">\n      <tbody>{table}</tbody>\n    </table>\n  );\n}\n\nexport default Board;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}